<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>是 String ， StringBuffer 还是 StringBuilder ？</title>
    <url>/2020/03/16/StringBuilder/</url>
    <content><![CDATA[<h1 id="是-String-，-StringBuffer-还是-StringBuilder-？"><a href="#是-String-，-StringBuffer-还是-StringBuilder-？" class="headerlink" title="是 String ， StringBuffer 还是 StringBuilder ？"></a>是 String ， StringBuffer 还是 StringBuilder ？</h1><p>如有侵权，立刻删除，原文链接：<a href="http://www.blogjava.net/chenpengyi/archive/2006/05/04/44492.html" target="_blank" rel="noopener">http://www.blogjava.net/chenpengyi/archive/2006/05/04/44492.html</a><br>相信大家对 String 和 StringBuffer 的区别也已经很了解了，但是估计还是会有很多同志对这两个类的工作原理有些不清楚的地方，今天我在这里重新把这个概念给大家复习一下，顺便牵出 J2SE 5.0 里面带来的一个新的字符操作的类—— StringBuilder （先别忙着扔我砖头，我还算清醒，我这里说的不是 C ＃， Java 也有 StringBuilder 类）。那么这个 StringBuilder 和 StringBuffer 以及我们最早遇见的 String 类有那些区别呢？在不同的场合下我们应该用哪个呢？我讲讲自己对这几个类的一点看法，也希望大家提出意见，每个人都有错的地方，在错了改的同时更是一个学习的好机会。<br>相信大家对 String 和 StringBuffer 的区别也已经很了解了，但是估计还是会有很多同志对这两个类的工作原理有些不清楚的地方，今天我在这里重新把这个概念给大家复习一下，顺便牵出 J2SE 5.0 里面带来的一个新的字符操作的类—— StringBuilder （先别忙着扔我砖头，我还算清醒，我这里说的不是 C ＃， Java 也有 StringBuilder 类）。那么这个 StringBuilder 和 StringBuffer 以及我们最早遇见的 String 类有那些区别呢？在不同的场合下我们应该用哪个呢？我讲讲自己对这几个类的一点看法，也希望大家提出意见，每个人都有错的地方，在错了改的同时更是一个学习的好机会。</p>
<a id="more"></a>
<p>简要的说， String 类型和 StringBuffer 类型的主要性能区别其实在于 String 是不可变的对象（为什么？问问 Java 的设计者吧，为什么 String 不是原生类型呢？）因此在每次对 String 类型进行改变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String 对象，所以经常改变内容的字符串最好不要用 String ，因为每次生成对象都会对系统性能产生影响，特别当内存中无引用对象多了以后， JVM 的 GC 就会开始工作，那速度是一定会相当慢的。这里尝试举个不是很恰当的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String S1 &#x3D; “abc”;</span><br><span class="line">&#x2F;&#x2F;For模拟程序的多次调用</span><br><span class="line">For(int I &#x3D; 0 ; I &lt; 10000 ; I ++)&#123;          </span><br><span class="line">    S1 + &#x3D; “def”;</span><br><span class="line">    S1 &#x3D; “abc”;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果是这样的话，到这个 for 循环完毕后，如果内存中的对象没有被 GC 清理掉的话，内存中一共有 上 万个了，惊人的数目，而如果这是一个很多人使用的系统，这样的数目就不算很多了，所以大家使用的时候一定要小心。</p>
<p>而如果是使用 StringBuffer 类则结果就不一样了，每次结果都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，再改变对象引用。所以在一般情况下我们推荐使用 StringBuffer ，特别是字符串对象经常改变的情况下。而在某些特别情况下， String 对象的字符串拼接其实是被 JVM 解释成了 StringBuffer 对象的拼接，所以这些时候 String 对象的速度并不会比 StringBuffer 对象慢，而特别是以下的字符串对象生成中， String 效率是远要比 StringBuffer 快的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String S1 &#x3D; “This is only a” + “ simple” + “ test”;</span><br><span class="line">StringBuffer Sb &#x3D; new StringBuilder(“This is only a”).append(“ simple”).append(“ test”);</span><br></pre></td></tr></table></figure>
<p>你会很惊讶的发现，生成StringS1对象的速度简直太快了，而这个时候 StringBuffer居然速度上根本一点都不占优势。其实这是 JVM 的一个把戏，在 JVM 眼里，这个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String S1 &#x3D; “This is only a” + “ simple” + “test”;</span><br></pre></td></tr></table></figure>
<p>其实就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String S1 &#x3D; “This is only a simple test”;</span><br></pre></td></tr></table></figure>
<p>所以当然不需要太多的时间了。但大家这里要注意的是，如果你的字符串是来自另外的 String 对象的话，速度就没那么快了，譬如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String S2 &#x3D; “This is only a”;</span><br><span class="line">String S3 &#x3D; “ simple”;</span><br><span class="line">String S4 &#x3D; “ test”;</span><br><span class="line">String S1 &#x3D; S2 +S3 + S4;</span><br></pre></td></tr></table></figure>
<p>这时候 JVM 会规规矩矩的按照原来的方式去做， S1 对象的生成速度就不像刚才那么快了，一会儿我们可以来个测试作个验证。</p>
<p>由此我们得到第一步结论：</p>
<p>在大部分情况下 StringBuffer &gt; String</p>
<p>而 StringBuilder 跟他们比又怎么样呢？先简单介绍一下， StringBuilder 是 JDK5.0 中新增加的一个类，它跟 StringBuffer 的区别看下面的介绍（来源 JavaWorld ）：</p>
<p>Java.lang.StringBuffer 线程安全的可变字符序列。类似于 String 的字符串缓冲区，但不能修改。可将字符串缓冲区安全地用于多个线程。可以在必要时对这些方法进行同步，因此任意特定实例上的所有操作就好像是以串行顺序发生的，该顺序与所涉及的每个线程进行的方法调用顺序一致。</p>
<p>每个字符串缓冲区都有一定的容量。只要字符串缓冲区所包含的字符序列的长度没有超出此容量，就无需分配新的内部缓冲区数组。如果内部缓冲区溢出，则此容量自动增大。从 JDK 5.0 开始，为该类增添了一个单个线程使用的等价类，即 StringBuilder 。与该类相比，通常应该优先使用 StringBuilder 类，因为它支持所有相同的操作，但由于它不执行同步，所以速度更快。</p>
<p>但是如果将 StringBuilder 的实例用于多个线程是不安全的。需要这样的同步，则建议使用 StringBuffer 。</p>
<p>这样说估计大家都能明白他们之间的区别了，那么下面我们再做一个一般性推导：</p>
<p>在大部分情况下 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">StringBuilder &gt; StringBuffer</span><br></pre></td></tr></table></figure>
<p>因此，根据这个不等式的传递定理： 在大部分情况下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">StringBuilder &gt; StringBuffer &gt; String</span><br></pre></td></tr></table></figure>
<p>既然有这样的推导结果了，我们做个测试验证一下：</p>
<p>测试代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String S1 &#x3D; “abc”;</span><br><span class="line"></span><br><span class="line">For(int I &#x3D; 0 ; I &lt; 10000 ; I ++)  &#x2F;&#x2F; For 模拟程序的多次调用</span><br><span class="line">&#123;</span><br><span class="line">    S1 + &#x3D; “def”;</span><br><span class="line">    S1 &#x3D; “abc”;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果是这样的话，到这个 for 循环完毕后，如果内存中的对象没有被 GC 清理掉的话，内存中一共有 上 万个了，惊人的数目，而如果这是一个很多人使用的系统，这样的数目就不算很多了，所以大家使用的时候一定要小心。</p>
<p>而如果是使用 StringBuffer 类则结果就不一样了，每次结果都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，再改变对象引用。所以在一般情况下我们推荐使用 StringBuffer ，特别是字符串对象经常改变的情况下。而在某些特别情况下， String 对象的字符串拼接其实是被 JVM 解释成了 StringBuffer 对象的拼接，所以这些时候 String 对象的速度并不会比 StringBuffer 对象慢，而特别是以下的字符串对象生成中， String 效率是远要比 StringBuffer 快的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String S1 &#x3D; “This is only a” + “ simple” + “ test”;</span><br><span class="line"></span><br><span class="line">StringBuffer Sb &#x3D; new StringBuilder(“This is only a”).append(“ simple”).append(“ test”);</span><br></pre></td></tr></table></figure>

<p>你会很惊讶的发现，生成 String S1 对象的速度简直太快了，而这个时候 StringBuffer 居然速度上根本一点都不占优势。其实这是 JVM 的一个把戏，在 JVM 眼里，这个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String S1 &#x3D; “This is only a” + “ simple” + “test”;</span><br></pre></td></tr></table></figure>
<p>其实就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String S1 &#x3D; “This is only a simple test”;</span><br></pre></td></tr></table></figure>
<p>所以当然不需要太多的时间了。但大家这里要注意的是，如果你的字符串是来自另外的 String 对象的话，速度就没那么快了，譬如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String S2 &#x3D; “This is only a”;</span><br><span class="line"></span><br><span class="line">String S3 &#x3D; “ simple”;</span><br><span class="line"></span><br><span class="line">String S4 &#x3D; “ test”;</span><br><span class="line"></span><br><span class="line">String S1 &#x3D; S2 +S3 + S4;</span><br></pre></td></tr></table></figure>
<p>这时候 JVM 会规规矩矩的按照原来的方式去做， S1 对象的生成速度就不像刚才那么快了，一会儿我们可以来个测试作个验证。</p>
<p>由此我们得到第一步结论：</p>
<p>在大部分情况下 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">StringBuffer &gt; String</span><br></pre></td></tr></table></figure>
<p>而 StringBuilder 跟他们比又怎么样呢？先简单介绍一下， StringBuilder 是 JDK5.0 中新增加的一个类，它跟 StringBuffer 的区别看下面的介绍（来源 JavaWorld ）：</p>
<p>Java.lang.StringBuffer 线程安全的可变字符序列。类似于 String 的字符串缓冲区，但不能修改。可将字符串缓冲区安全地用于多个线程。可以在必要时对这些方法进行同步，因此任意特定实例上的所有操作就好像是以串行顺序发生的，该顺序与所涉及的每个线程进行的方法调用顺序一致。</p>
<p>每个字符串缓冲区都有一定的容量。只要字符串缓冲区所包含的字符序列的长度没有超出此容量，就无需分配新的内部缓冲区数组。如果内部缓冲区溢出，则此容量自动增大。从 JDK 5.0 开始，为该类增添了一个单个线程使用的等价类，即 StringBuilder 。与该类相比，通常应该优先使用 StringBuilder 类，因为它支持所有相同的操作，但由于它不执行同步，所以速度更快。</p>
<p>但是如果将 StringBuilder 的实例用于多个线程是不安全的。需要这样的同步，则建议使用 StringBuffer 。</p>
<p>这样说估计大家都能明白他们之间的区别了，那么下面我们再做一个一般性推导：</p>
<p>在大部分情况下 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">StringBuilder &gt; StringBuffer</span><br></pre></td></tr></table></figure>
<p>因此，根据这个不等式的传递定理： 在大部分情况下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">StringBuilder &gt; StringBuffer &gt; String</span><br></pre></td></tr></table></figure>
<p>既然有这样的推导结果了，我们做个测试验证一下：</p>
<p>测试代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class testssb &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;** Creates a new instance of testssb *&#x2F;</span><br><span class="line">    final static int ttime &#x3D; 10000;&#x2F;&#x2F; 测试循环次数</span><br><span class="line">    public testssb() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void test(String s)&#123;</span><br><span class="line">        long begin &#x3D; System.currentTimeMillis();</span><br><span class="line">        for(int i&#x3D;0;i&lt;ttime;i++)&#123;</span><br><span class="line">            s +&#x3D; &quot;add&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        long over &#x3D; System.currentTimeMillis();</span><br><span class="line">        System.out.println(&quot; 操作 &quot;+s.getClass().getName()+&quot; 类型使用的时间为： &quot;</span><br><span class="line">            + (over - begin) + &quot; 毫秒 &quot; );       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void test(StringBuffer s)&#123;</span><br><span class="line">        long begin &#x3D; System.currentTimeMillis();</span><br><span class="line">        for(int i&#x3D;0;i&lt;ttime;i++)&#123;</span><br><span class="line">            s.append(&quot;add&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        long over &#x3D; System.currentTimeMillis();</span><br><span class="line">        System.out.println(&quot; 操作 &quot;+s.getClass().getName()+&quot; 类型使用的时间为： &quot;</span><br><span class="line">            + (over - begin) + &quot; 毫秒 &quot; );       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void test(StringBuilder s)&#123;</span><br><span class="line">        long begin &#x3D; System.currentTimeMillis();</span><br><span class="line">        for(int i&#x3D;0;i&lt;ttime;i++)&#123;</span><br><span class="line">            s.append(&quot;add&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        long over &#x3D; System.currentTimeMillis();</span><br><span class="line">        System.out.println(&quot; 操作 &quot;+s.getClass().getName()+&quot; 类型使用的时间为： &quot;</span><br><span class="line">            + (over - begin) + &quot; 毫秒 &quot; );       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 对 String 直接进行字符串拼接的测试</span><br><span class="line"></span><br><span class="line">    public void test2()&#123;</span><br><span class="line">        String s2 &#x3D; &quot;abadf&quot;;</span><br><span class="line">        long begin &#x3D; System.currentTimeMillis();</span><br><span class="line">        for(int i&#x3D;0;i&lt;ttime;i++)&#123;</span><br><span class="line">            String s &#x3D; s2 + s2 + s2 ;</span><br><span class="line">        &#125;</span><br><span class="line">        long over &#x3D; System.currentTimeMillis();</span><br><span class="line">        System.out.println(&quot; 操作字符串对象引用相加类型使用的时间为： &quot;</span><br><span class="line">            + (over - begin) + &quot; 毫秒 &quot; );       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void test3()&#123;</span><br><span class="line">        long begin &#x3D; System.currentTimeMillis();</span><br><span class="line">        for(int i&#x3D;0;i&lt;ttime;i++)&#123;</span><br><span class="line">            String s &#x3D; &quot;abadf&quot; + &quot;abadf&quot; + &quot;abadf&quot; ;</span><br><span class="line">        &#125;</span><br><span class="line">        long over &#x3D; System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot; 操作字符串相加使用的时间为： &quot;</span><br><span class="line">            + (over - begin) + &quot; 毫秒 &quot; );       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">    String s1 &#x3D;&quot;abc&quot;;</span><br><span class="line">    StringBuffer sb1 &#x3D; new StringBuffer(&quot;abc&quot;);</span><br><span class="line">    StringBuilder sb2 &#x3D; new StringBuilder(&quot;abc&quot;);</span><br><span class="line">    testssb t &#x3D; new testssb();</span><br><span class="line">    t.test(s1);</span><br><span class="line">    t.test(sb1);</span><br><span class="line">    t.test(sb2);</span><br><span class="line">    t.test2();</span><br><span class="line">    t.test3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>循环次数 ttime 为 10000 次的测试结果如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">操作 java.lang.String 类型使用的时间为： 4392 毫秒</span><br><span class="line">操作 java.lang.StringBuffer 类型使用的时间为： 0 毫秒</span><br><span class="line">操作 java.lang.StringBuilder 类型使用的时间为： 0 毫秒</span><br><span class="line">操作字符串对象引用相加类型使用的时间为： 15 毫秒</span><br><span class="line">操作字符串相加使用的时间为： 0 毫秒</span><br></pre></td></tr></table></figure>
<p>好像还看不出 StringBuffer 和 StringBuilder 的区别，把 ttime 加到 30000 次看看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">操作 java.lang.String 类型使用的时间为： 53444 毫秒</span><br><span class="line">操作 java.lang.StringBuffer 类型使用的时间为： 15 毫秒</span><br><span class="line">操作 java.lang.StringBuilder 类型使用的时间为： 15 毫秒</span><br><span class="line">操作字符串对象引用相加类型使用的时间为： 31 毫秒</span><br><span class="line">操作字符串相加使用的时间为： 0 毫秒</span><br></pre></td></tr></table></figure>
<p>StringBuffer 和 StringBuilder 的性能上还是没有太大的差异，再加大到 100000 看看，这里就不加入对 String 类型的测试了，因为对 String 类型这么大数据量的测试会很慢滴……</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">操作 java.lang.StringBuffer 类型使用的时间为： 31 毫秒</span><br><span class="line">操作 java.lang.StringBuilder 类型使用的时间为： 16 毫秒</span><br></pre></td></tr></table></figure>
<p>能看出差别了，但其中有多次的测试结果居然是 StringBuffer 比 StringBuilder 快，再加大一些到 1000000 看看（应该不会当机吧？）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">操作 java.lang.StringBuffer 类型使用的时间为： 265 毫秒</span><br><span class="line">操作 java.lang.StringBuilder 类型使用的时间为： 219毫秒</span><br></pre></td></tr></table></figure>
<p>基本来说都是在性能上都是<br><code>StringBuilder &gt; StringBuffer &gt; String</code></p>
]]></content>
      <tags>
        <tag>阅读博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_IO</title>
    <url>/2020/01/30/Java-IO/</url>
    <content><![CDATA[<h1 id="io流学习"><a href="#io流学习" class="headerlink" title="io流学习"></a>io流学习</h1><h3 id="1-写文件"><a href="#1-写文件" class="headerlink" title="1.写文件"></a>1.写文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.分类：</span><br><span class="line">抽象基类        节点流（文件流)        缓冲流（处理流的一种，可以提升文件操作的效率）</span><br><span class="line">InputStream     FileInputStream      BufferedInputStream</span><br><span class="line">OutputStream    FileOutputStream     BufferedOutputstream(flush)</span><br><span class="line">Reader          FileReader           BufferedReader(readerLine)</span><br><span class="line">Writer          FileWriter           BufferedWriter(flush)</span><br></pre></td></tr></table></figure>
<h3 id="一、节点流"><a href="#一、节点流" class="headerlink" title="一、节点流"></a>一、节点流</h3><h6 id="1-写文件-1"><a href="#1-写文件-1" class="headerlink" title="1.写文件"></a>1.写文件</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    @Test</span><br><span class="line">    public void testFileOutputStream() &#123;</span><br><span class="line">        File file &#x3D; new File(&quot;hello2.txt&quot;);</span><br><span class="line">        FileOutputStream fos &#x3D; null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            fos &#x3D; new FileOutputStream(file);</span><br><span class="line">            fos.write(new String(&quot;i love china and i love the word&quot;).getBytes());</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (fos !&#x3D; null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">1.目标文件位置可以为空，会自动创建</span><br><span class="line">2.打开文件流必须手动关闭数据流</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h6 id="2-读文件"><a href="#2-读文件" class="headerlink" title="2.读文件"></a>2.读文件</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    @Test</span><br><span class="line">    public void testFileInputStream3() &#123;</span><br><span class="line">        FileInputStream fis &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            File file &#x3D; new File(&quot;E:\\abc\\abc.txt&quot;);</span><br><span class="line">            fis &#x3D; new FileInputStream(file);</span><br><span class="line">            byte[] b &#x3D; new byte[5];</span><br><span class="line">            int len;</span><br><span class="line">            while ((len &#x3D; fis.read(b)) !&#x3D; -1) &#123;</span><br><span class="line">&#x2F;&#x2F;                for (int i : b) &#123;</span><br><span class="line">&#x2F;&#x2F;                    System.out.print((char)i);</span><br><span class="line">&#x2F;&#x2F;                &#125;</span><br><span class="line">&#x2F;&#x2F;                for (int i &#x3D; 0; i&lt; len; i++) &#123;</span><br><span class="line">&#x2F;&#x2F;                    System.out.print((char)b[i]);</span><br><span class="line">&#x2F;&#x2F;                &#125;</span><br><span class="line">&#x2F;&#x2F;                System.out.println();</span><br><span class="line">                String str &#x3D; new String(b, 0, len);</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h6 id="3-读取文件并写入到另一个位置"><a href="#3-读取文件并写入到另一个位置" class="headerlink" title="3.读取文件并写入到另一个位置"></a>3.读取文件并写入到另一个位置</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testFileInputOutputStream()&#123;</span><br><span class="line">    File file1 &#x3D; new File(&quot;hello.txt&quot;);</span><br><span class="line">    File file2 &#x3D; new File(&quot;hello3.txt&quot;);</span><br><span class="line"></span><br><span class="line">    FileInputStream fis &#x3D; null;</span><br><span class="line">    FileOutputStream fos &#x3D; null;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        fis &#x3D; new FileInputStream(file1);</span><br><span class="line">        fos &#x3D; new FileOutputStream(file2);</span><br><span class="line">        &#x2F;&#x2F;实现文件的复制</span><br><span class="line">        byte[] b &#x3D; new byte[10];</span><br><span class="line">        int len;</span><br><span class="line">        while((len &#x3D; fis.read(b)) !&#x3D; -1) &#123;</span><br><span class="line">            fos.write(b, 0, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (IOException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            fis.close();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        if(fos !&#x3D; null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="4-将复制文件抽成具体方法"><a href="#4-将复制文件抽成具体方法" class="headerlink" title="4.将复制文件抽成具体方法"></a>4.将复制文件抽成具体方法</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.可以实现任意文件类型</span><br><span class="line">    @Test</span><br><span class="line">    public void testCopyFile() &#123;</span><br><span class="line">        String src &#x3D; &quot;C:\\Users\\asus\\Desktop\\timg.jfif&quot;;</span><br><span class="line">        String dest &#x3D; &quot;tiem.jpg&quot;;</span><br><span class="line">        copyFile(src, dest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;实现文件复制的方法</span><br><span class="line">    public static void copyFile(String src, String dest) &#123;</span><br><span class="line">        File file1 &#x3D; new File(src);</span><br><span class="line">        File file2 &#x3D; new File(dest);</span><br><span class="line"></span><br><span class="line">        FileInputStream fis &#x3D; null;</span><br><span class="line">        FileOutputStream fos &#x3D; null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            fis &#x3D; new FileInputStream(file1);</span><br><span class="line">            fos &#x3D; new FileOutputStream(file2);</span><br><span class="line">            &#x2F;&#x2F;实现文件的复制</span><br><span class="line">            byte[] b &#x3D; new byte[10];</span><br><span class="line">            int len;</span><br><span class="line">            while((len &#x3D; fis.read(b)) !&#x3D; -1) &#123;</span><br><span class="line">                fos.write(b, 0, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            if(fos !&#x3D; null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h6 id="5-文件的读取与写入"><a href="#5-文件的读取与写入" class="headerlink" title="5.文件的读取与写入"></a>5.文件的读取与写入</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.使用FileReader FileWriter 可以实现文本文件的复制</span><br><span class="line">2.对于非文本文件（视频文件、音频文件、图片等）只能使用字节流（FileInputStream、FileOutputStream）</span><br><span class="line">3.如果对非文本文件那么复制后会显示不支持此类文件</span><br><span class="line">4.优点：使用此类方法比（FileInputStream、FileOutputStream）快速</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testFileReaderWriter() &#123;</span><br><span class="line">        FileReader fr &#x3D; null;</span><br><span class="line">        FileWriter fw &#x3D; null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            File file &#x3D; new File(&quot;hello.txt&quot;);</span><br><span class="line">            File dest &#x3D; new File(&quot;hello4.txt&quot;);</span><br><span class="line"></span><br><span class="line">            fr &#x3D; new FileReader(file);</span><br><span class="line">            fw &#x3D; new FileWriter(dest);</span><br><span class="line">            int len;</span><br><span class="line">            char[] c &#x3D; new char[30];</span><br><span class="line">            while((len &#x3D; fr.read(c)) !&#x3D; -1) &#123;</span><br><span class="line">                fw.write(c, 0, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            if(fr !&#x3D; null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">           if(fw !&#x3D; null) &#123;</span><br><span class="line">               try &#123;</span><br><span class="line">                   fw.close();</span><br><span class="line">               &#125; catch (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="二-缓冲流"><a href="#二-缓冲流" class="headerlink" title="二.缓冲流"></a>二.缓冲流</h3><h6 id="1-文件的复制"><a href="#1-文件的复制" class="headerlink" title="1.文件的复制"></a>1.文件的复制</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.使用缓冲流会加速文件复制的速度</span><br><span class="line">    @Test</span><br><span class="line">    public void testCopyFile() &#123;</span><br><span class="line">        long start &#x3D; System.currentTimeMillis();</span><br><span class="line">        String src &#x3D; &quot;iu.jpg&quot;;</span><br><span class="line">        String dest &#x3D; &quot;iu3.jpg&quot;;</span><br><span class="line">        copyFile(src, dest);</span><br><span class="line">        long end &#x3D; System.currentTimeMillis();</span><br><span class="line">        System.out.println(&quot;花费的时间为：&quot; + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;使用缓冲流实现文件的复制方法</span><br><span class="line">    public void copyFile(String src, String dest) &#123;</span><br><span class="line">        &#x2F;&#x2F;提供读入写入的文件</span><br><span class="line">        File file1 &#x3D; new File(src);</span><br><span class="line">        File file2 &#x3D; new File(dest);</span><br><span class="line"></span><br><span class="line">        FileInputStream fis &#x3D; null;</span><br><span class="line">        FileOutputStream fos &#x3D; null;</span><br><span class="line">        BufferedInputStream bis &#x3D; null;</span><br><span class="line">        BufferedOutputStream bos &#x3D; null;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;提供相应的流</span><br><span class="line">        try &#123;</span><br><span class="line">            fis &#x3D; new FileInputStream(file1);</span><br><span class="line">            fos &#x3D; new FileOutputStream(file2);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;将创建的节点的对象作为形参传递给缓冲流的构造器</span><br><span class="line">            bis &#x3D; new BufferedInputStream(fis);</span><br><span class="line">            bos &#x3D; new BufferedOutputStream(fos);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;具体实现文件复制的方法</span><br><span class="line">            int len;</span><br><span class="line">            byte[] b &#x3D; new byte[1024];</span><br><span class="line">            while((len &#x3D; bis.read(b)) !&#x3D; -1)&#123;</span><br><span class="line">                bos.write(b, 0, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            &#x2F;&#x2F;关闭相应的流</span><br><span class="line">            if(bos !&#x3D; null)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(bis !&#x3D; null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h6 id="2-bufferReader的ReadLine方法"><a href="#2-bufferReader的ReadLine方法" class="headerlink" title="2.bufferReader的ReadLine方法"></a>2.bufferReader的ReadLine方法</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testBufferedReader() &#123;</span><br><span class="line">    File file &#x3D; new File(&quot;hello1.txt&quot;);</span><br><span class="line">    File file1 &#x3D; new File(&quot;newhello.txt&quot;);</span><br><span class="line">    BufferedReader bf &#x3D; null;</span><br><span class="line">    BufferedWriter bw &#x3D; null;</span><br><span class="line">    try &#123;</span><br><span class="line">        FileReader fr &#x3D; new FileReader(file);</span><br><span class="line">        FileWriter fw &#x3D; new FileWriter(file1);</span><br><span class="line">        bf &#x3D; new BufferedReader(fr);</span><br><span class="line">        bw &#x3D; new BufferedWriter(fw);</span><br><span class="line">        String str &#x3D; null;</span><br><span class="line">        while ((str &#x3D; bf.readLine()) !&#x3D; null)&#123;</span><br><span class="line">            bw.write(str);</span><br><span class="line">            bw.newLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if(bw !&#x3D; null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                bw.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(bf !&#x3D; null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                bf.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三、转换流"><a href="#三、转换流" class="headerlink" title="三、转换流"></a>三、转换流</h3><h6 id="1-解码与编码"><a href="#1-解码与编码" class="headerlink" title="1.解码与编码"></a>1.解码与编码</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test1()&#123;</span><br><span class="line">    BufferedReader br &#x3D; null;</span><br><span class="line">    BufferedWriter bw &#x3D; null;</span><br><span class="line">    try &#123;</span><br><span class="line">        &#x2F;&#x2F;编码</span><br><span class="line">        File file &#x3D; new File(&quot;hello1.txt&quot;);</span><br><span class="line">        FileInputStream fis &#x3D; new FileInputStream(file);</span><br><span class="line">        InputStreamReader isr &#x3D; new InputStreamReader(fis, &quot;GBK&quot;);</span><br><span class="line">        br &#x3D; new BufferedReader(isr);</span><br><span class="line">        &#x2F;&#x2F;解码</span><br><span class="line">        File file1 &#x3D; new File(&quot;hello2.txt&quot;);</span><br><span class="line">        FileOutputStream fos &#x3D; new FileOutputStream(file1);</span><br><span class="line">        OutputStreamWriter osw &#x3D; new OutputStreamWriter(fos, &quot;GBK&quot;);</span><br><span class="line">        bw &#x3D; new BufferedWriter(osw);</span><br><span class="line">        </span><br><span class="line">        String str &#x3D; null;</span><br><span class="line">        while((str &#x3D; br.readLine()) !&#x3D; null) &#123;</span><br><span class="line">            bw.write(str);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if(bw !&#x3D; null) &#123;</span><br><span class="line">            try&#123;</span><br><span class="line">                bw.close();</span><br><span class="line">            &#125; catch(IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(br !&#x3D; null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125; catch(IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="四、字节字符流的使用练习"><a href="#四、字节字符流的使用练习" class="headerlink" title="四、字节字符流的使用练习"></a>四、字节字符流的使用练习</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.创建一个文本文件</span><br><span class="line">2.读取文本文件内容</span><br><span class="line">3.复制文本文件并重命名</span><br><span class="line">    @Test</span><br><span class="line">    public void test1()&#123;</span><br><span class="line"></span><br><span class="line">        File file &#x3D; new File(&quot;test.txt&quot;);</span><br><span class="line">        File file1 &#x3D; new File(&quot;test1.txt&quot;);</span><br><span class="line">        FileWriter fw &#x3D; null;</span><br><span class="line">        FileReader fr &#x3D; null;</span><br><span class="line">        BufferedWriter bw &#x3D; null;</span><br><span class="line">        BufferedReader br &#x3D; null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            fw &#x3D; new FileWriter(file);</span><br><span class="line">            bw &#x3D; new BufferedWriter(fw);</span><br><span class="line"></span><br><span class="line">            bw.write(&quot;java是一门好的语言，很方便，学起来很简单&quot;);</span><br><span class="line">            bw.flush();</span><br><span class="line"></span><br><span class="line">            if(file.exists())&#123;</span><br><span class="line">                fr &#x3D; new FileReader(file);</span><br><span class="line">                fw &#x3D; new FileWriter(file1);</span><br><span class="line"></span><br><span class="line">                bw &#x3D; new BufferedWriter(fw);</span><br><span class="line">                br &#x3D; new BufferedReader(fr);</span><br><span class="line"></span><br><span class="line">                String str;</span><br><span class="line">                while((str &#x3D; br.readLine()) !&#x3D; null) &#123;</span><br><span class="line">                    System.out.println(str);</span><br><span class="line">                    bw.write(str);</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    bw.flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if(bw !&#x3D; null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(br !&#x3D; null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="五、其它流"><a href="#五、其它流" class="headerlink" title="五、其它流"></a>五、其它流</h3><h6 id="1-随机读取"><a href="#1-随机读取" class="headerlink" title="1.随机读取"></a>1.随机读取</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.在指定位置用新的字符串覆盖</span><br><span class="line">    @Test</span><br><span class="line">    public void testRandomAccessFile()&#123;</span><br><span class="line">        RandomAccessFile raf &#x3D; null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            raf &#x3D; new RandomAccessFile(new File(&quot;tea.txt&quot;), &quot;rw&quot;);</span><br><span class="line"></span><br><span class="line">            raf.seek(4);</span><br><span class="line">            raf.write(&quot;“面向对象的编程语言”&quot;.getBytes());</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally&#123;</span><br><span class="line">            if(raf !&#x3D; null)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    raf.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>```</p>
]]></content>
      <tags>
        <tag>一阶段完毕</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习报错</title>
    <url>/2019/12/26/vue/</url>
    <content><![CDATA[<h1 id="vue学习报错"><a href="#vue学习报错" class="headerlink" title="vue学习报错"></a>vue学习报错</h1><h4 id="1-v-for报错"><a href="#1-v-for报错" class="headerlink" title="1.v-for报错"></a>1.v-for报错</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error: Custom elements in iteration require &#39;v-bind:key&#39; directives (vue&#x2F;valid-v-for) at src\views\home\Home.vue:5:7:</span><br><span class="line">描述：必须使用 :key&#x3D;&#39;item&#39;,Vue 2.2.0+的版本里，当在组件中使用v-for时，key是必须的。</span><br><span class="line">解决：在v-for后面绑定key</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>草稿</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatiesplus学习总结（一）</title>
    <url>/2019/12/25/mybatiesplus/</url>
    <content><![CDATA[<h1 id="mybatiesPlus-学习笔记"><a href="#mybatiesPlus-学习笔记" class="headerlink" title="mybatiesPlus 学习笔记"></a>mybatiesPlus 学习笔记</h1><h2 id="一、lombok"><a href="#一、lombok" class="headerlink" title="一、lombok"></a>一、lombok</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;lombok介绍</span><br><span class="line">Lombok项目是一个Java库，它会自动插入编辑器和构建工具中，Lombok提供了一组有用的注释，用来消除Java类中的大量样板代码。仅五个字符(@Data)就可以替换数百行代码从而产生干净，简洁且易于维护的Java类。</span><br></pre></td></tr></table></figure>

<h4 id="1-使用lombok的操作"><a href="#1-使用lombok的操作" class="headerlink" title="1.使用lombok的操作"></a>1.使用lombok的操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">1.创建实体 bean 时，只需要在 bean 上加入 @Data </span><br><span class="line">注解，在编译时会自动假如getter和setter方法</span><br></pre></td></tr></table></figure>
<blockquote>
<p>java8特性：System.out::println 可以在迭代器中循环打印对象</p>
</blockquote>
<a id="more"></a>

<h2 id="二、mp查询方法"><a href="#二、mp查询方法" class="headerlink" title="二、mp查询方法"></a>二、mp查询方法</h2><h4 id="1-bean对象的操作"><a href="#1-bean对象的操作" class="headerlink" title="1.bean对象的操作"></a>1.bean对象的操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.在创建好的bean 可以使用@tableName(&quot;表名&quot;)注解声明对应的表</span><br><span class="line">2.使用@TableId注解可以声明该字段为主键</span><br><span class="line">3.若想使用自定义变量名可以使用@TableField(&quot;数据表中对应字段&quot;)来代替该字段</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>1.若声明为static的静态变量则@Data不会为其生成getter和setter方法，并且该字段set方法赋的值不会被保存到数据库中 </li>
<li>2.@TableField(exist=false)为备注（默认exist=true）</li>
</ul>
</blockquote>
<h4 id="2-普通查询"><a href="#2-普通查询" class="headerlink" title="2.普通查询"></a>2.普通查询</h4><p>==注意：<em>名值对中名必须为数据库字段名即为数据库中列名</em>==</p>
<h6 id="①-通过对Map中put名值对进行添加，使用selectByMap（）进行查询"><a href="#①-通过对Map中put名值对进行添加，使用selectByMap（）进行查询" class="headerlink" title="①.通过对Map中put名值对进行添加，使用selectByMap（）进行查询"></a>①.通过对Map中put名值对进行添加，使用selectByMap（）进行查询</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void selectByMap()&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; columnMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">    columnMap.put(&quot;emp_name&quot;,&quot;奥特曼&quot;);</span><br><span class="line">    columnMap.put(&quot;gender&quot;,&quot;W&quot;);</span><br><span class="line">    List&lt;Tbl_emp&gt; list &#x3D; tbl_empMapper.selectByMap(columnMap);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="②-通过构造QueryWrapper进行条件查询"><a href="#②-通过构造QueryWrapper进行条件查询" class="headerlink" title="②.通过构造QueryWrapper进行条件查询"></a>②.通过构造QueryWrapper进行条件查询</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void selectByWrapper()&#123;</span><br><span class="line">    QueryWrapper&lt;Tbl_emp&gt; tbl_empQueryWrapper &#x3D; new QueryWrapper&lt;&gt;();</span><br><span class="line">    &#x2F;&#x2F;查询一</span><br><span class="line">    tbl_empQueryWrapper.like(&quot;emp_name&quot;,&quot;奥&quot;).lt(&quot;emp_id&quot;,2022);</span><br><span class="line">    &#x2F;&#x2F;查询二</span><br><span class="line">    tbl_empQueryWrapper.like(&quot;emp_name&quot;,&quot;奥&quot;).between(&quot;emp_id&quot;,2020,2024).isNotNull(&quot;gender&quot;);</span><br><span class="line">    &#x2F;&#x2F;查询三</span><br><span class="line">    tbl_empQueryWrapper.likeRight(&quot;emp_name&quot;,&quot;奥&quot;).or().ge(&quot;emp_id&quot;,2020).orderByDesc(&quot;emp_id&quot;)</span><br><span class="line">            .orderByAsc(&quot;d_id&quot;);</span><br><span class="line">    &#x2F;&#x2F;查询四</span><br><span class="line">    tbl_empQueryWrapper.in(&quot;emp_id&quot;, Arrays.asList(2020,2021,2023,2024));</span><br><span class="line">            </span><br><span class="line">    List&lt;Tbl_emp&gt; tbl_emps &#x3D; tbl_empMapper.selectList(tbl_empQueryWrapper);</span><br><span class="line">    tbl_emps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="③-通过select-“字段一”-”字段二”-”-”-选择你所要查询获得的值"><a href="#③-通过select-“字段一”-”字段二”-”-”-选择你所要查询获得的值" class="headerlink" title="③.通过select(“字段一”,”字段二”,”.”)选择你所要查询获得的值"></a>③.通过select(“字段一”,”字段二”,”.”)选择你所要查询获得的值</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void selectByWrapperSupper()&#123;</span><br><span class="line">    QueryWrapper&lt;Tbl_emp&gt; tbl_empQueryWrapper &#x3D; new QueryWrapper&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;选择需要的字段select()</span><br><span class="line">    tbl_empQueryWrapper.select(&quot;emp_id&quot;,&quot;emp_name&quot;).like(&quot;emp_name&quot;,&quot;奥&quot;).lt(&quot;emp_id&quot;,2023);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;选择不需要那些字段select(Tbl_emp.class,&quot;lombok表达式&quot;)</span><br><span class="line">    tbl_empQueryWrapper.select(Tbl_emp.class,info-&gt;!info.getColumn().equals(&quot;gender&quot;)&amp;&amp;</span><br><span class="line">    !info.getColumn().equals(&quot;d_id&quot;)).like(&quot;emp_name&quot;,&quot;奥&quot;).lt(&quot;emp_id&quot;,2023);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;Tbl_emp&gt; tbl_emps &#x3D; tbl_empMapper.selectList(tbl_empQueryWrapper);</span><br><span class="line">    tbl_emps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="④-通过like-StringUtils-isNotEmpty-形参-”字段名”-形参-对获取的数据进行是否为空判断"><a href="#④-通过like-StringUtils-isNotEmpty-形参-”字段名”-形参-对获取的数据进行是否为空判断" class="headerlink" title="④.通过like(StringUtils.isNotEmpty(形参),”字段名”,形参)对获取的数据进行是否为空判断"></a>④.通过like(StringUtils.isNotEmpty(形参),”字段名”,形参)对获取的数据进行是否为空判断</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testCondition()&#123;</span><br><span class="line">    String name &#x3D; &quot;&quot;;</span><br><span class="line">    String gender &#x3D; &quot;M&quot;;</span><br><span class="line">    condition(name, gender);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public void condition(String name, String gender)&#123;</span><br><span class="line">    QueryWrapper&lt;Tbl_emp&gt; tbl_empQueryWrapper &#x3D; new QueryWrapper&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    tbl_empQueryWrapper.like(StringUtils.isNotEmpty(name),&quot;emp_name&quot;,name).</span><br><span class="line">            likeRight(StringUtils.isNotEmpty(gender), &quot;gender&quot;,gender);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;Tbl_emp&gt; tbl_emps &#x3D; tbl_empMapper.selectList(tbl_empQueryWrapper);</span><br><span class="line">    tbl_emps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="⑤-通过自定义的bean对象进行查询"><a href="#⑤-通过自定义的bean对象进行查询" class="headerlink" title="⑤.通过自定义的bean对象进行查询"></a>⑤.通过自定义的bean对象进行查询</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*需要在bean对象上添加@TableField(condition&#x3D;SqlCondition.LIKE)注解</span><br><span class="line">*@TableField(condition &#x3D; &quot;%s&lt;#&#123;%s&#125;&quot;) 可以通过自定义方法来选择需要的操作</span><br><span class="line">   </span><br><span class="line">    @Test</span><br><span class="line">    public void selectByWrapperEntity()&#123;</span><br><span class="line">        Tbl_emp emp &#x3D; new Tbl_emp();</span><br><span class="line">        emp.setEmpName(&quot;奥&quot;);</span><br><span class="line">        emp.setEmpId(2020);</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;Tbl_emp&gt; queryWrapper &#x3D; new QueryWrapper&lt;Tbl_emp&gt;(emp);</span><br><span class="line"></span><br><span class="line">        List&lt;Tbl_emp&gt; empList &#x3D; tbl_empMapper.selectList(queryWrapper);</span><br><span class="line">        empList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h6 id="⑥-通过lambda（）条件构造器进行查询"><a href="#⑥-通过lambda（）条件构造器进行查询" class="headerlink" title="⑥.通过lambda（）条件构造器进行查询"></a>⑥.通过lambda（）条件构造器进行查询</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void selectBylambda()&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Tbl_emp&gt; lambda &#x3D; new QueryWrapper&lt;Tbl_emp&gt;().lambda();</span><br><span class="line">    lambda.like(Tbl_emp::getEmpName, &quot;奥&quot;).lt(Tbl_emp::getEmpId, 2024);</span><br><span class="line"></span><br><span class="line">    List&lt;Tbl_emp&gt; empList &#x3D; tbl_empMapper.selectList(lambda);</span><br><span class="line">    empList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="⑦-通过LambdaQueryChainWrapper方法进行查询"><a href="#⑦-通过LambdaQueryChainWrapper方法进行查询" class="headerlink" title="⑦.通过LambdaQueryChainWrapper方法进行查询"></a>⑦.通过LambdaQueryChainWrapper方法进行查询</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void selectLambda2()&#123;</span><br><span class="line">    List&lt;Tbl_emp&gt; empList &#x3D; new LambdaQueryChainWrapper&lt;Tbl_emp&gt;(tbl_empMapper)</span><br><span class="line">            .like(Tbl_emp::getEmpName, &quot;奥&quot;).ge(Tbl_emp::getEmpId, 2022).list();</span><br><span class="line">    empList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>==lr–&gt;大于== ==lt–&gt;小于== ==ge–&gt;大于等于==</em></p>
<h2 id="三、自定义sql及分页查询"><a href="#三、自定义sql及分页查询" class="headerlink" title="三、自定义sql及分页查询"></a>三、自定义sql及分页查询</h2><h4 id="1-自定义sql"><a href="#1-自定义sql" class="headerlink" title="1.自定义sql"></a>1.自定义sql</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.需要在yml文件中配置**mapper.xml文件生成位置</span><br><span class="line">2.xml中内容与mybaties相同</span><br><span class="line">mybaties-plus:</span><br><span class="line">    mapper-locaitons:</span><br><span class="line">    - com&#x2F;mp&#x2F;mapper&#x2F;*</span><br></pre></td></tr></table></figure>
<h4 id="2-分页查询"><a href="#2-分页查询" class="headerlink" title="2.分页查询"></a>2.分页查询</h4><h6 id="①-使用分页需要的配置"><a href="#①-使用分页需要的配置" class="headerlink" title="①.使用分页需要的配置"></a>①.使用分页需要的配置</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.创建configuration包</span><br><span class="line">2.创建MybatiesPlusConfig配置类,并且添加@Configuration注解，标志位配置类 </span><br><span class="line">    @Bean</span><br><span class="line">    public PaginationIntercaptor paginationInterceptor()&#123;</span><br><span class="line">        return new PaginationInterceptor();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h6 id="②-使用selectPage-方法分页查询"><a href="#②-使用selectPage-方法分页查询" class="headerlink" title="②.使用selectPage()方法分页查询"></a>②.使用selectPage()方法分页查询</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void selectPage()&#123;</span><br><span class="line">    QueryWrapper&lt;Tbl_emp&gt; queryWrapper &#x3D; new QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.like(&quot;emp_name&quot;,&quot;奥&quot;);</span><br><span class="line"></span><br><span class="line">    Page&lt;Tbl_emp&gt; page &#x3D; new Page&lt;&gt;(1,2);</span><br><span class="line"></span><br><span class="line">    IPage&lt;Tbl_emp&gt; iPage &#x3D; tbl_empMapper.selectPage(page, queryWrapper);</span><br><span class="line">    System.out.println(&quot;总页数：&quot;+iPage.getPages());</span><br><span class="line">    System.out.println(&quot;总记录数：&quot;+iPage.getTotal());</span><br><span class="line">    List&lt;Tbl_emp&gt; empList &#x3D; iPage.getRecords();</span><br><span class="line">    empList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、AR模式、主键策略和基本配置"><a href="#四、AR模式、主键策略和基本配置" class="headerlink" title="四、AR模式、主键策略和基本配置"></a>四、AR模式、主键策略和基本配置</h2><h4 id="1-AR模式"><a href="#1-AR模式" class="headerlink" title="1.AR模式"></a>1.AR模式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加注解：@EqualsAndHashCode(callSuper &#x3D; false)</span><br><span class="line">bean实例继承Model&lt;bean&gt;</span><br><span class="line">可以直接使用bean对象进行crud操作</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
