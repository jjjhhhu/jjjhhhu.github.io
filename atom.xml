<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WxxyWrz_Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-26T05:54:35.358Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Wrz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mybatiesplus学习总结（一）</title>
    <link href="http://yoursite.com/2019/12/25/newpapername/"/>
    <id>http://yoursite.com/2019/12/25/newpapername/</id>
    <published>2019-12-25T11:35:10.000Z</published>
    <updated>2019-12-26T05:54:35.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mybatiesPlus-学习笔记"><a href="#mybatiesPlus-学习笔记" class="headerlink" title="mybatiesPlus 学习笔记"></a>mybatiesPlus 学习笔记</h1><h2 id="一、lombok"><a href="#一、lombok" class="headerlink" title="一、lombok"></a>一、lombok</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;lombok介绍</span><br><span class="line">Lombok项目是一个Java库，它会自动插入编辑器和构建工具中，Lombok提供了一组有用的注释，用来消除Java类中的大量样板代码。仅五个字符(@Data)就可以替换数百行代码从而产生干净，简洁且易于维护的Java类。</span><br></pre></td></tr></table></figure><h4 id="1-使用lombok的操作"><a href="#1-使用lombok的操作" class="headerlink" title="1.使用lombok的操作"></a>1.使用lombok的操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">1.创建实体 bean 时，只需要在 bean 上加入 @Data </span><br><span class="line">注解，在编译时会自动假如getter和setter方法</span><br></pre></td></tr></table></figure><blockquote><p>java8特性：System.out::println 可以在迭代器中循环打印对象</p></blockquote><h2 id="二、mp查询方法"><a href="#二、mp查询方法" class="headerlink" title="二、mp查询方法"></a>二、mp查询方法</h2><h4 id="1-bean对象的操作"><a href="#1-bean对象的操作" class="headerlink" title="1.bean对象的操作"></a>1.bean对象的操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.在创建好的bean 可以使用@tableName(&quot;表名&quot;)注解声明对应的表</span><br><span class="line">2.使用@TableId注解可以声明该字段为主键</span><br><span class="line">3.若想使用自定义变量名可以使用@TableField(&quot;数据表中对应字段&quot;)来代替该字段</span><br></pre></td></tr></table></figure><blockquote><ul><li>1.若声明为static的静态变量则@Data不会为其生成getter和setter方法，并且该字段set方法赋的值不会被保存到数据库中 </li><li>2.@TableField(exist=false)为备注（默认exist=true）</li></ul></blockquote><h4 id="2-普通查询"><a href="#2-普通查询" class="headerlink" title="2.普通查询"></a>2.普通查询</h4><p>==注意：<em>名值对中名必须为数据库字段名即为数据库中列名</em>==</p><h6 id="①-通过对Map中put名值对进行添加，使用selectByMap（）进行查询"><a href="#①-通过对Map中put名值对进行添加，使用selectByMap（）进行查询" class="headerlink" title="①.通过对Map中put名值对进行添加，使用selectByMap（）进行查询"></a>①.通过对Map中put名值对进行添加，使用selectByMap（）进行查询</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void selectByMap()&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; columnMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">    columnMap.put(&quot;emp_name&quot;,&quot;奥特曼&quot;);</span><br><span class="line">    columnMap.put(&quot;gender&quot;,&quot;W&quot;);</span><br><span class="line">    List&lt;Tbl_emp&gt; list &#x3D; tbl_empMapper.selectByMap(columnMap);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h6 id="②-通过构造QueryWrapper进行条件查询"><a href="#②-通过构造QueryWrapper进行条件查询" class="headerlink" title="②.通过构造QueryWrapper进行条件查询"></a>②.通过构造QueryWrapper进行条件查询</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void selectByWrapper()&#123;</span><br><span class="line">    QueryWrapper&lt;Tbl_emp&gt; tbl_empQueryWrapper &#x3D; new QueryWrapper&lt;&gt;();</span><br><span class="line">    &#x2F;&#x2F;查询一</span><br><span class="line">    tbl_empQueryWrapper.like(&quot;emp_name&quot;,&quot;奥&quot;).lt(&quot;emp_id&quot;,2022);</span><br><span class="line">    &#x2F;&#x2F;查询二</span><br><span class="line">    tbl_empQueryWrapper.like(&quot;emp_name&quot;,&quot;奥&quot;).between(&quot;emp_id&quot;,2020,2024).isNotNull(&quot;gender&quot;);</span><br><span class="line">    &#x2F;&#x2F;查询三</span><br><span class="line">    tbl_empQueryWrapper.likeRight(&quot;emp_name&quot;,&quot;奥&quot;).or().ge(&quot;emp_id&quot;,2020).orderByDesc(&quot;emp_id&quot;)</span><br><span class="line">            .orderByAsc(&quot;d_id&quot;);</span><br><span class="line">    &#x2F;&#x2F;查询四</span><br><span class="line">    tbl_empQueryWrapper.in(&quot;emp_id&quot;, Arrays.asList(2020,2021,2023,2024));</span><br><span class="line">            </span><br><span class="line">    List&lt;Tbl_emp&gt; tbl_emps &#x3D; tbl_empMapper.selectList(tbl_empQueryWrapper);</span><br><span class="line">    tbl_emps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="③-通过select-“字段一”-”字段二”-”-”-选择你所要查询获得的值"><a href="#③-通过select-“字段一”-”字段二”-”-”-选择你所要查询获得的值" class="headerlink" title="③.通过select(“字段一”,”字段二”,”.”)选择你所要查询获得的值"></a>③.通过select(“字段一”,”字段二”,”.”)选择你所要查询获得的值</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void selectByWrapperSupper()&#123;</span><br><span class="line">    QueryWrapper&lt;Tbl_emp&gt; tbl_empQueryWrapper &#x3D; new QueryWrapper&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;选择需要的字段select()</span><br><span class="line">    tbl_empQueryWrapper.select(&quot;emp_id&quot;,&quot;emp_name&quot;).like(&quot;emp_name&quot;,&quot;奥&quot;).lt(&quot;emp_id&quot;,2023);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;选择不需要那些字段select(Tbl_emp.class,&quot;lombok表达式&quot;)</span><br><span class="line">    tbl_empQueryWrapper.select(Tbl_emp.class,info-&gt;!info.getColumn().equals(&quot;gender&quot;)&amp;&amp;</span><br><span class="line">    !info.getColumn().equals(&quot;d_id&quot;)).like(&quot;emp_name&quot;,&quot;奥&quot;).lt(&quot;emp_id&quot;,2023);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;Tbl_emp&gt; tbl_emps &#x3D; tbl_empMapper.selectList(tbl_empQueryWrapper);</span><br><span class="line">    tbl_emps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="④-通过like-StringUtils-isNotEmpty-形参-”字段名”-形参-对获取的数据进行是否为空判断"><a href="#④-通过like-StringUtils-isNotEmpty-形参-”字段名”-形参-对获取的数据进行是否为空判断" class="headerlink" title="④.通过like(StringUtils.isNotEmpty(形参),”字段名”,形参)对获取的数据进行是否为空判断"></a>④.通过like(StringUtils.isNotEmpty(形参),”字段名”,形参)对获取的数据进行是否为空判断</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testCondition()&#123;</span><br><span class="line">    String name &#x3D; &quot;&quot;;</span><br><span class="line">    String gender &#x3D; &quot;M&quot;;</span><br><span class="line">    condition(name, gender);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public void condition(String name, String gender)&#123;</span><br><span class="line">    QueryWrapper&lt;Tbl_emp&gt; tbl_empQueryWrapper &#x3D; new QueryWrapper&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    tbl_empQueryWrapper.like(StringUtils.isNotEmpty(name),&quot;emp_name&quot;,name).</span><br><span class="line">            likeRight(StringUtils.isNotEmpty(gender), &quot;gender&quot;,gender);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;Tbl_emp&gt; tbl_emps &#x3D; tbl_empMapper.selectList(tbl_empQueryWrapper);</span><br><span class="line">    tbl_emps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="⑤-通过自定义的bean对象进行查询"><a href="#⑤-通过自定义的bean对象进行查询" class="headerlink" title="⑤.通过自定义的bean对象进行查询"></a>⑤.通过自定义的bean对象进行查询</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">*需要在bean对象上添加@TableField(condition&#x3D;SqlCondition.LIKE)注解</span><br><span class="line">*@TableField(condition &#x3D; &quot;%s&lt;#&#123;%s&#125;&quot;) 可以通过自定义方法来选择需要的操作</span><br><span class="line">   </span><br><span class="line">    @Test</span><br><span class="line">    public void selectByWrapperEntity()&#123;</span><br><span class="line">        Tbl_emp emp &#x3D; new Tbl_emp();</span><br><span class="line">        emp.setEmpName(&quot;奥&quot;);</span><br><span class="line">        emp.setEmpId(2020);</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;Tbl_emp&gt; queryWrapper &#x3D; new QueryWrapper&lt;Tbl_emp&gt;(emp);</span><br><span class="line"></span><br><span class="line">        List&lt;Tbl_emp&gt; empList &#x3D; tbl_empMapper.selectList(queryWrapper);</span><br><span class="line">        empList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="⑥-通过lambda（）条件构造器进行查询"><a href="#⑥-通过lambda（）条件构造器进行查询" class="headerlink" title="⑥.通过lambda（）条件构造器进行查询"></a>⑥.通过lambda（）条件构造器进行查询</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void selectBylambda()&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Tbl_emp&gt; lambda &#x3D; new QueryWrapper&lt;Tbl_emp&gt;().lambda();</span><br><span class="line">    lambda.like(Tbl_emp::getEmpName, &quot;奥&quot;).lt(Tbl_emp::getEmpId, 2024);</span><br><span class="line"></span><br><span class="line">    List&lt;Tbl_emp&gt; empList &#x3D; tbl_empMapper.selectList(lambda);</span><br><span class="line">    empList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="⑦-通过LambdaQueryChainWrapper方法进行查询"><a href="#⑦-通过LambdaQueryChainWrapper方法进行查询" class="headerlink" title="⑦.通过LambdaQueryChainWrapper方法进行查询"></a>⑦.通过LambdaQueryChainWrapper方法进行查询</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void selectLambda2()&#123;</span><br><span class="line">    List&lt;Tbl_emp&gt; empList &#x3D; new LambdaQueryChainWrapper&lt;Tbl_emp&gt;(tbl_empMapper)</span><br><span class="line">            .like(Tbl_emp::getEmpName, &quot;奥&quot;).ge(Tbl_emp::getEmpId, 2022).list();</span><br><span class="line">    empList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>==lr–&gt;大于== ==lt–&gt;小于== ==ge–&gt;大于等于==</em></p><h2 id="三、自定义sql及分页查询"><a href="#三、自定义sql及分页查询" class="headerlink" title="三、自定义sql及分页查询"></a>三、自定义sql及分页查询</h2><h4 id="1-自定义sql"><a href="#1-自定义sql" class="headerlink" title="1.自定义sql"></a>1.自定义sql</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.需要在yml文件中配置**mapper.xml文件生成位置</span><br><span class="line">2.xml中内容与mybaties相同</span><br><span class="line">mybaties-plus:</span><br><span class="line">    mapper-locaitons:</span><br><span class="line">    - com&#x2F;mp&#x2F;mapper&#x2F;*</span><br></pre></td></tr></table></figure><h4 id="2-分页查询"><a href="#2-分页查询" class="headerlink" title="2.分页查询"></a>2.分页查询</h4><h6 id="①-使用分页需要的配置"><a href="#①-使用分页需要的配置" class="headerlink" title="①.使用分页需要的配置"></a>①.使用分页需要的配置</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.创建configuration包</span><br><span class="line">2.创建MybatiesPlusConfig配置类,并且添加@Configuration注解，标志位配置类 </span><br><span class="line">    @Bean</span><br><span class="line">    public PaginationIntercaptor paginationInterceptor()&#123;</span><br><span class="line">        return new PaginationInterceptor();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="②-使用selectPage-方法分页查询"><a href="#②-使用selectPage-方法分页查询" class="headerlink" title="②.使用selectPage()方法分页查询"></a>②.使用selectPage()方法分页查询</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void selectPage()&#123;</span><br><span class="line">    QueryWrapper&lt;Tbl_emp&gt; queryWrapper &#x3D; new QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.like(&quot;emp_name&quot;,&quot;奥&quot;);</span><br><span class="line"></span><br><span class="line">    Page&lt;Tbl_emp&gt; page &#x3D; new Page&lt;&gt;(1,2);</span><br><span class="line"></span><br><span class="line">    IPage&lt;Tbl_emp&gt; iPage &#x3D; tbl_empMapper.selectPage(page, queryWrapper);</span><br><span class="line">    System.out.println(&quot;总页数：&quot;+iPage.getPages());</span><br><span class="line">    System.out.println(&quot;总记录数：&quot;+iPage.getTotal());</span><br><span class="line">    List&lt;Tbl_emp&gt; empList &#x3D; iPage.getRecords();</span><br><span class="line">    empList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、AR模式、主键策略和基本配置"><a href="#四、AR模式、主键策略和基本配置" class="headerlink" title="四、AR模式、主键策略和基本配置"></a>四、AR模式、主键策略和基本配置</h2><h4 id="1-AR模式"><a href="#1-AR模式" class="headerlink" title="1.AR模式"></a>1.AR模式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">添加注解：@EqualsAndHashCode(callSuper &#x3D; false)</span><br><span class="line">bean实例继承Model&lt;bean&gt;</span><br><span class="line">可以直接使用bean对象进行crud操作</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mybatiesPlus-学习笔记&quot;&gt;&lt;a href=&quot;#mybatiesPlus-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;mybatiesPlus 学习笔记&quot;&gt;&lt;/a&gt;mybatiesPlus 学习笔记&lt;/h1&gt;&lt;h2 id=&quot;一、lombok&quot;&gt;&lt;a href=&quot;#一、lombok&quot; class=&quot;headerlink&quot; title=&quot;一、lombok&quot;&gt;&lt;/a&gt;一、lombok&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;&amp;#x2F;lombok介绍&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Lombok项目是一个Java库，它会自动插入编辑器和构建工具中，Lombok提供了一组有用的注释，用来消除Java类中的大量样板代码。仅五个字符(@Data)就可以替换数百行代码从而产生干净，简洁且易于维护的Java类。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;1-使用lombok的操作&quot;&gt;&lt;a href=&quot;#1-使用lombok的操作&quot; class=&quot;headerlink&quot; title=&quot;1.使用lombok的操作&quot;&gt;&lt;/a&gt;1.使用lombok的操作&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.创建实体 bean 时，只需要在 bean 上加入 @Data &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注解，在编译时会自动假如getter和setter方法&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;java8特性：System.out::println 可以在迭代器中循环打印对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;二、mp查询方法&quot;&gt;&lt;a href=&quot;#二、mp查询方法&quot; class=&quot;headerlink&quot; title=&quot;二、mp查询方法&quot;&gt;&lt;/a&gt;二、mp查询方法&lt;/h2&gt;&lt;h4 id=&quot;1-bean对象的操作&quot;&gt;&lt;a href=&quot;#1-bean对象的操作&quot; class=&quot;headerlink&quot; title=&quot;1.bean对象的操作&quot;&gt;&lt;/a&gt;1.bean对象的操作&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.在创建好的bean 可以使用@tableName(&amp;quot;表名&amp;quot;)注解声明对应的表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.使用@TableId注解可以声明该字段为主键&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.若想使用自定义变量名可以使用@TableField(&amp;quot;数据表中对应字段&amp;quot;)来代替该字段&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1.若声明为static的静态变量则@Data不会为其生成getter和setter方法，并且该字段set方法赋的值不会被保存到数据库中 &lt;/li&gt;
&lt;li&gt;2.@TableField(exist=false)为备注（默认exist=true）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;2-普通查询&quot;&gt;&lt;a href=&quot;#2-普通查询&quot; class=&quot;headerlink&quot; title=&quot;2.普通查询&quot;&gt;&lt;/a&gt;2.普通查询&lt;/h4&gt;&lt;p&gt;==注意：&lt;em&gt;名值对中名必须为数据库字段名即为数据库中列名&lt;/em&gt;==&lt;/p&gt;
&lt;h6 id=&quot;①-通过对Map中put名值对进行添加，使用selectByMap（）进行查询&quot;&gt;&lt;a href=&quot;#①-通过对Map中put名值对进行添加，使用selectByMap（）进行查询&quot; class=&quot;headerlink&quot; title=&quot;①.通过对Map中put名值对进行添加，使用selectByMap（）进行查询&quot;&gt;&lt;/a&gt;①.通过对Map中put名值对进行添加，使用selectByMap（）进行查询&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void selectByMap()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    HashMap&amp;lt;String, Object&amp;gt; columnMap &amp;#x3D; new HashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    columnMap.put(&amp;quot;emp_name&amp;quot;,&amp;quot;奥特曼&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    columnMap.put(&amp;quot;gender&amp;quot;,&amp;quot;W&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    List&amp;lt;Tbl_emp&amp;gt; list &amp;#x3D; tbl_empMapper.selectByMap(columnMap);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    list.forEach(System.out::println);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="mybatiesPLus学习 后端 mysql" scheme="http://yoursite.com/tags/mybatiesPLus%E5%AD%A6%E4%B9%A0-%E5%90%8E%E7%AB%AF-mysql/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/12/25/hello-world/"/>
    <id>http://yoursite.com/2019/12/25/hello-world/</id>
    <published>2019-12-25T08:59:10.675Z</published>
    <updated>2019-12-25T08:59:10.675Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
